// MEMORY MANAGER MODULE 

alias funcNum R1;
alias cpid R2;
alias i R3;

//get freepage
    if(funcNum == 1)then 
        // increment WAIT_MEM count 
            [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
        
        // loop .. i.e no memory available (SUSPEND  STATE) 
            while([SYSTEM_STATUS_TABLE+2]==0) do 
                [PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+4]=WAIT_MEM;

                multipush(R0, R1, R2 , R3 );
                call MOD_5;
                multipop(R0, R1, R2 , R3 );		
            endwhile;
        
        // update WAIT_MEM_COUNT & MEM_FREE_COUNT 
            [SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1; 
            [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1; 
        
        // get the free page 
            i=0;
            while(i<128) do
                if([MEMORY_FREE_LIST+i]==0) then
                    [MEMORY_FREE_LIST+i]=1;
                    break;
                endif;
                i=i+1;
            endwhile;
        // set the return value 
            R0=i;

            return;
    endif;


//Release Page 
    if(funcNum == 2)then 
        
        // decrement no.of process using this page 
            [MEMORY_FREE_LIST+R2]=[MEMORY_FREE_LIST+R2]-1;

        //Increment MEM_FREE_COUNT if no process is using that page
            if([MEMORY_FREE_LIST+R2]==0) then

                [SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1; 
                i=0;

                // if any process in WAIT_MEM ..we have space now(set it to READY)
                    while(i<16) do
                        if([PROCESS_TABLE+16*i+4]==WAIT_MEM) then
                            [PROCESS_TABLE+16*i+4]=READY;
                            break;
                        endif;
                        i=i+1;
                    endwhile;

            endif;
            
            return;

    endif;
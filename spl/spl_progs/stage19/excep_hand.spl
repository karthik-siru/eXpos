[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = -1;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 11] * 512 - 1;
backup;
alias userSP R0;
alias code R5;

userSP = SP;

multipush(EIP);
//print "exp";
//breakpoint;
if(EC != 0) then
    if(userSP == (10*512)-1) then
        print "Stack full";
    endif;
    if(EC == 1) then
        print "Illegal Instruction";
    endif;
    if(EC == 2) then
        print "Illegal memory access";
    endif;
    if(EC == 3) then
        print "Arthematic error";
    endif;
    
    multipush(R0,R1);
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    multipop(R0,R1);
    multipush(R0,R1);
    call MOD_5;
    multipop(R0,R1);
else
    if((EPN > 3) && (EPN < 8)) then
        //print "exp";
        multipush(R0,R1,R5);
        code = [DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1] * 10 + EPN];
        R1 = 5;
        R2 = code;
        call MOD_2;
        [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14] + 2 * EPN] = R0;
        [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14] + 2 * EPN + 1] = "1100";
        //breakpoint;
        multipop(R0,R1,R5);
    endif;
    if((EPN > 1) && (EPN < 4)) then
        multipush(R0,R1);
        R1 = 1;
        call MOD_2;
        [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14] + 4] = R0;
        [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14] + 5] = "1110";
        R1 = 1;
        call MOD_2;
        [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14] + 6] = R0;
        [[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14] + 7] = "1110";
        //breakpoint;
        multipop(R0,R1);
    endif;
endif;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
multipop(EIP);
restore;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1] * 16) + 13];
SP = SP + 1;
[[[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 14] + 2 * (SP / 512)] * 512+ (SP % 512)]=EIP;
//breakpoint;
ireturn;
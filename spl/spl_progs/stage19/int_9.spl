// set the mode 
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 9 ] = 9 ;

		alias userSP R0;
		userSP = SP;

// save the SP and switch to kernel

		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16  + 13] = SP ;
		SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]* 512 -1 ;

// get the file name from userStack

		alias physicalAddr R1 ;
		alias physicalPage R2 ;

		alias fileName R3;

		physicalPage = [PTBR + ((userSP-4)/512)*2 ];
		physicalAddr = physicalPage*512 + (userSP-4)%512 ;

		fileName = [physicalAddr];

// ---------------------------

		alias found R4 ;
		alias inodeIndex R5;
		alias i R6;

		found = 0;
		i = 0;

		while (i<MAX_FILE_NUM) do 
			
			if ([INODE_TABLE + 16*i + 1] == fileName)then 
			found = 1;
			inodeIndex = i;
			break;  
			endif;
			i = i +1 ;

		endwhile;

// --------------------------

// not found 
		if(found == 0)then 

			alias physicalAddrRetVal R7;
			physicalAddrRetVal = [PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512 ;
			[physicalAddrRetVal] = -1 ;

			// reset the mode 
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
			
			SP = userSP;
			ireturn;
		endif;

// --------------------------

// call the exit process 
		alias cpid R8;
		cpid = [SYSTEM_STATUS_TABLE + 1];

		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8); 
		R1 = 3;
		R2 = cpid;

		call MOD_1 ;
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8); 

// --------------------------------

//set the same userareapage
		alias userareapage R9;
		userareapage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11];

		[ MEMORY_FREE_LIST + userareapage ]=[ MEMORY_FREE_LIST + userareapage ]+1;

// perprocesssetup

       i = 496;

	   while (i<512)do
	      [userareapage*512 +i] =-1;
		  i = i+1;
	   endwhile;

// free page count 
		[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

//Set SP to top of kernel stack
		SP = userareapage* 512 - 1;

// change the state  
		[PROCESS_TABLE + (cpid * 16) + 4]=RUNNING;

		//Update Inode Index Field
		[PROCESS_TABLE + (cpid* 16) + 7]=inodeIndex;

// ------------------------------------

// get the pages using getpages func (MOD_2)

         PTBR = PAGE_TABLE_BASE + cpid*20;

//-----------------------------

// Library
		[PTBR+0]=63;
		[PTBR+1]="0100";
		[PTBR+2]=64;
		[PTBR+3]="0100";

// ----------------------------

//  invalidate heap pages 
    
		[PTBR + 4] = -1;
		[PTBR + 5] = "0000";
		[PTBR + 6] = -1;
		[PTBR + 7] = "0000";


// -------------------------------

// Stack 

		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9); 
		R1 = 1;
		call MOD_2;
		[PTBR + 16] = R0;
		[PTBR + 17] = "0110";

		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9); 

		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9); 
		R1 = 1;
		call MOD_2;
		[PTBR + 18] = R0;
		[PTBR + 19] = "0110";

		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9); 

// ------------------------------------

breakpoint;
// load code pages : (load only if exits)
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9); 
		alias codeBlock R9;
		codeBlock=[INODE_TABLE+inodeIndex*16+8];
		// get code page 
			R1=5; 
			R2=codeBlock;
            call MOD_2;
			breakpoint;
			[PTBR+8]=R0; 
			[PTBR+9]="0100";
		multipop(R0,R1,R2,R3,R4,R5,R6,R8,R9);
		
		// invalidate other pages 
			i=1;
			while(i<4) do
				[PTBR + i*2 + 8] =-1;
				[PTBR + i*2 + 9] ="0000";
				i=i+1;
			endwhile;

// -------------------------- 

// initialize disk_map_entries with -1 
		i=0;
		while(i<10) do 
			[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+i]=-1;
			i=i+1;
		endwhile;

// set the codeblocks to corresponding disk map entries 
		i=0;
		while(i<4) do
			[DISK_MAP_TABLE+[SYSTEM_STATUS_TABLE+1]*10+4+i] = [INODE_TABLE+inodeIndex*16+8+i];
			i=i+1;
		endwhile;

// -------------------------

// set top of stack as CodePage-Start Addrs 
		[[PTBR+16]*512] = [[PTBR+8]*512+1];

		SP=8*512;

		//reset mode flag 
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
		
		breakpoint;

		ireturn;
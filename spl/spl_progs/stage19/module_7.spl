// load expos Library
loadi(63,13);
loadi(64,14);

//load init 
loadi(65,7);
loadi(66,8);

//load int-6 
loadi(14,27);
loadi(15,28);

//load int-7 
loadi(16,29);
loadi(17,30);

//load int-9 
loadi(20,33);
loadi(21,34);

//load int-10
loadi(22,35);
loadi(23,36);

//load excep handler 
loadi(2,15);
loadi(3,16);

//load even program 
loadi(83,69);

//timer-int
loadi(4, 17);
loadi(5, 18);

//disk-int
loadi(6,19);
loadi(7,20);

//console-int
loadi(8,21);
loadi(9,22);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 1
loadi(42,55);
loadi(43,56);

//load module 2
loadi(44,57);
loadi(45,58);

//load module 4 
loadi(48,61);
loadi(49,62);

//load module 5 
loadi(50,63);
loadi(51,64);

//inode table
loadi(59,3);
loadi(60,4);

// disk_map table 
loadi(61, 2);


//Setting memory free list
// 82 page used as stack for module_7
	alias i R0;
	i=0;
	while(i<=82) do
		[MEMORY_FREE_LIST+i]=1;
		i=i+1;
	endwhile;
	i=83;
	while(i<=127) do
		[MEMORY_FREE_LIST+i]=0;
		i=i+1;
	endwhile;


// DISK_STATUS
[DISK_STATUS_TABLE] = 0;


//Initialising WAIT_MEM_COUNT to 0
[SYSTEM_STATUS_TABLE+3]=0;

//Initialising MEM_FREE_COUNT to 45(no of free pages)
[SYSTEM_STATUS_TABLE+2]=47;


[TERMINAL_STATUS_TABLE]=0;


//init process 

PTBR = PAGE_TABLE_BASE + 20 ;
PTLR = 10;

[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";

[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

[76*512]=[65*512+1];

[PROCESS_TABLE + 16 +  1 ] = 1;
[PROCESS_TABLE + 16 +  4 ] = CREATED;
[PROCESS_TABLE + 16 + 11 ] = 80;
[PROCESS_TABLE + 16 + 12 ] = 0;
[PROCESS_TABLE + 16 + 13 ] = 8*512 ;
[PROCESS_TABLE + 16 + 14 ] = PTBR;
[PROCESS_TABLE + 16 + 15 ] = PTLR;

// disk map entries 
[DISK_MAP_TABLE+14]=7;
[DISK_MAP_TABLE+15]=8;

// perprocess entries for init 

	alias count R0;
	count = 496;
	while(count<512) do 
		[80*512+count]=-1; 
		count=count+1;
	endwhile;


// set all the other process as TERMINATED.
count = 2;

while (count <= 15)do
   [PROCESS_TABLE + 16*count + 1 ] = -1;
   [PROCESS_TABLE + 16*count + 4 ] = TERMINATED;
   count =  count + 1 ;
endwhile;

return;
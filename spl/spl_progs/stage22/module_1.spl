// PROCESS MANAGER MODULE 

alias funcNum R1;
alias cpid R2;
alias userAreaPage R3;
alias i R14;

// ------------------

// get PCB entry
    if (funcNum == 1 )then 
       i=0;
       while(i<16) do
            if([PROCESS_TABLE+16*i+4] == TERMINATED) then
                [PROCESS_TABLE+16*i+1]=i;
                [PROCESS_TABLE+16*i+4]=ALLOCATED;
                [PROCESS_TABLE+16*i+14]=PAGE_TABLE_BASE+20*i;
                [PROCESS_TABLE+16*i+15]=10;
                R0=i;
                return;
            endif;
            i=i+1;
       endwhile;
       R0=-1;
       return;
    endif;
// ------------------

// free userAreaPage
    if(funcNum == 2)then

         //  get the userAreaPage
            userAreaPage = [PROCESS_TABLE + cpid*16 + 11 ];

         // invoke release semaphore ..if it is valid 

            i = 496;

            while (i<512)do 
                 if ([userAreaPage *512 + i] == 1 )then
                    multipush(R0,R1,R2,R3,R4,R5,R14);
                    R1 = 7;
                    R2 = cpid;
                    R3 = [userAreaPage*512 + i+1];
                    call MOD_0;
                    multipop(R0,R1,R2,R3,R4,R5,R14);
                 endif;
                 i = i+2 ;
            endwhile ;

        // release page 
            multipush(R0,R1,R2,R3,R4);
            R1 = 2;
            R2 = userAreaPage;
            call MOD_2;
            multipop(R0,R1,R2,R3,R4);
            return;

    endif;

// ------------------

// exit 
    if(funcNum == 3)then

       // if mode != 9 
        if([PROCESS_TABLE +  cpid* 16 + 9] != 9) then
            i=0;
            while(i<=15) do
                if([PROCESS_TABLE+16*i+4]==WAIT_PROCESS && [PROCESS_TABLE+i*16+5]==cpid) then
                    [PROCESS_TABLE+16*i+4]=READY;
                endif;
                if([PROCESS_TABLE+16*i+2]== cpid ) then
                    [PROCESS_TABLE+16*i+2]=-1;
                endif;
                i=i+1;
            endwhile;
        endif;
        
       // freepage table 
            multipush(R0,R1,R2,R3,R4);
            R1 = 4;
            R2 = cpid;
            call MOD_1;
            multipop(R0,R1,R2,R3,R4);

      // free userAreaPage 
            multipush(R0,R1,R2,R3,R4);
            R1 = 2;
            R2 = cpid;
            call MOD_1;
            multipop(R0,R1,R2,R3,R4);

      // set the status as TERMINATED 
            [PROCESS_TABLE + cpid*16 + 4] = TERMINATED;

      return;

    endif;

// ------------------

// free PageTable 
    if(funcNum == 4)then
    
            i = 4;
            PTBR = PAGE_TABLE_BASE + cpid*20;
            
            // invalidate Library Pages
            	[PTBR+0]=-1;
                [PTBR+1]="0000";
                [PTBR+2]=-1;
                [PTBR+3]="0000";

            while (i<20) do 

                    // release page 
                        multipush(R0,R1,R2,R3,R4);
                        R1 = 2;
                        R2 = [PTBR +i];
                        call MOD_2 ;
                        multipop(R0,R1,R2,R3,R4);

                    // invalidate each pagetable entry
                        [PTBR + i] = -1;
                        [PTBR + i+1] = "0000";
                    i = i+2 ;
            endwhile;
            
            // releasing blocks for stack and heap
            alias disk_map R5;
            disk_map = DISK_MAP_TABLE + 10*cpid ;
            
            // releasing heap blocks 
            i = 2;
            while (i < 4)do
                // if it is valid 
                 if ([disk_map+i] != -1)then 
                       multipush(R0,R1,R2,R3,R4,R5);
                       R1 = 4;
                       R2 = [disk_map + i];
                       multipop(R0,R1,R2,R3,R4,R5);
                 endif;
                 i = i + 1;
            endwhile;

            // releasing stack blocks 
            i = 8;
            while (i < 10)do
                // if it is valid 
                 if ([disk_map+i] != -1)then 
                       multipush(R0,R1,R2,R3,R4,R5);
                       R1 = 4;
                       R2 = [disk_map + i];
                       multipop(R0,R1,R2,R3,R4,R5);
                 endif;
                 i = i + 1;
            endwhile;

            // reset all entries to -1
            i = 0;
            while (i < 10)do
                 [disk_map+i] = -1;
                 i = i + 1;
            endwhile;

            return;

    endif;

// -----------------
